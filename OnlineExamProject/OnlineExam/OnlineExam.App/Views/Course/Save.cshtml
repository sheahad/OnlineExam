@model OnlineExam.App.Models.CourseCreateViewModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section styles{
    
<link href="~/Content/bootstrap.min.css" rel="stylesheet" />
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width"/>
    <title>Course Entry </title>

    @if (ViewBag.SMsg != null)
    {
        <h3 style="color: green; font-weight: bold">@ViewBag.SMsg </h3>

    }
    @if (ViewBag.EMsg != null)
    {
        <h3 style="color: red; font-weight: bold">@ViewBag.EMsg </h3>

    }
     

</head>

<body>
@using (Html.BeginForm())
{
    <div class="col-md-2">

    </div>
    <div class="col-md-8">
        <div>

            <h6>Create Course</h6>
            <br/>

            <div class="form-horizontal">


                <div class="col-md-12">
                    <div class="form-group form-row">
                        @Html.LabelFor(c => c.OrganizationId, htmlAttributes: new {@class = "control-label col-md-2"})
                        <div class="col-md-10">
                            @Html.DropDownListFor(c => c.OrganizationId, Model.OrganizationSelectListItems, "--Select--", new {@class = "form-control",})
                            @Html.ValidationMessageFor(c => c.OrganizationId, null, new {@class = "text-danger"})
                        </div>
                    </div>



                    <div class="form-group form-row">
                        @Html.LabelFor(c => c.Name, htmlAttributes: new {@class = "control-label col-md-2"})
                        <div class="col-md-10">
                            @Html.TextBoxFor(c => c.Name, null, new {@class = "form-control", placeholder = "Name"})
                            @Html.ValidationMessageFor(c => c.Name, null, new {@class = "text-danger"})

                        </div>
                    </div>





                    <div class="form-group form-row">
                        @Html.LabelFor(c => c.Code, htmlAttributes: new {@class = "control-label col-md-2"})
                        <div class="col-md-10">
                            @Html.TextBoxFor(c => c.Code, null, new {@class = "form-control", placeholder = "Code"})
                        </div>
                    </div>


                    <div class="form-group form-row">
                        @Html.LabelFor(c => c.CourseDuration, htmlAttributes: new {@class = "control-label col-md-2"})
                        <div class="col-md-10">
                            @Html.TextBoxFor(c => c.CourseDuration, null, new {@class = "form-control", placeholder = "Course Duration"})
                            @Html.ValidationMessageFor(c => c.CourseDuration, null, new {@class = "text-danger"})
                        </div>
                    </div>

                    <div class="form-group form-row">
                        @Html.LabelFor(c => c.Credit, htmlAttributes: new {@class = "control-label col-md-2"})
                        <div class="col-md-10">
                            @Html.TextBoxFor(c => c.Credit, null, new {@class = "form-control", placeholder = "Credit Hour"})
                        </div>
                    </div>


                    <div class="form-group form-row">
                        @Html.LabelFor(c => c.Fee, htmlAttributes: new {@class = "control-label col-md-2"})
                        <div class="col-md-10">
                            @Html.TextBoxFor(c => c.Fee, null, new {@class = "form-control", placeholder = "Fee"})
                        </div>
                    </div>


                    <div class="form-group form-row">
                        @Html.LabelFor(c => c.Outline, htmlAttributes: new {@class = "control-label col-md-2"})
                        <div class="col-md-10">
                            @Html.TextAreaFor(c => c.Outline, htmlAttributes: new {@class = "form-control", placeholder = " Outline Outline"})
                        </div>
                    </div>

                    <div class="form-group form-row">
                        @Html.LabelFor(c => c.Tag, htmlAttributes: new {@class = "control-label col-md-2"})
                        <div class="col-md-10">
                            <input type="text" value="Amsterdam,Washington" data-role="tagsinput"/>
                        </div>
                    </div>

                    <div class="form-group form-row">
                        @Html.LabelFor(c => c.Tag, htmlAttributes: new {@class = "control-label col-md-2"})
                        <div class="col-md-10">
                            @Html.TextBoxFor(c => c.Tag, htmlAttributes: new {@class = "form-control", placeholder = " "})

                            @Html.ListBoxFor(c => c.TagId, Model.Tags, new {@class = "form-control",})


                        </div>
                    </div>



                    <div class="form-group form-row">

                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Save" class="btn btn-success"/>
                            <div class="progress-bar" role="progressbar" aria-valuenow="70"
                                 aria-valuemin="0" aria-valuemax="100" style="width: 70%">
                                <span class="sr-only">70% Complete</span>
                            </div>
                        </div>
                    </div>


                </div>

            </div>
        </div>
    </div>
}


</body>
</html>
@section Scripts
{
    <script>
    var citynames = new Bloodhound({
        datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
        queryTokenizer: Bloodhound.tokenizers.whitespace,
        prefetch: {
            url: 'assets/citynames.json',
            filter: function (list) {
                return $.map(list, function (cityname) {
                    return { name: cityname };
                });
            }
        }
    });
    citynames.initialize();

    $('input').tagsinput({
        typeaheadjs: {
            name: 'citynames',
            displayKey: 'name',
            valueKey: 'name',
            source: citynames.ttAdapter()
        }
    });
</script>
}
